<?php
namespace Steenbag\Tubes\General\Types;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;
use JsonSerializable;
use stdClass;

class Filter extends TBase implements JsonSerializable
{
    static public $isValidate = true;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'field',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'operator',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'value',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'values',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        5 => array(
            'var' => 'sub_rules',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Steenbag\Tubes\General\Types\Filter',
                ),
        ),
        6 => array(
            'var' => 'combinator',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var string
     */
    public $field = null;
    /**
     * @var string
     */
    public $operator = "=";
    /**
     * @var string
     */
    public $value = null;
    /**
     * @var string[]
     */
    public $values = null;
    /**
     * @var \Steenbag\Tubes\General\Types\Filter[]
     */
    public $sub_rules = null;
    /**
     * @var string
     */
    public $combinator = "all";

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            parent::__construct(self::$_TSPEC, $vals);
        }
    }

    public function getName()
    {
        return 'Filter';
    }


    public function read($input)
    {
        $tmp = $this->_read('Filter', self::$_TSPEC, $input);
        $this->_validateForRead();
        return $tmp;
    }


    public function write($output)
    {
        $this->_validateForWrite();
        return $this->_write('Filter', self::$_TSPEC, $output);
    }


    private function _validateForRead() {
        if ($this->field === null) {
            throw new TProtocolException('Required field Filter.field is unset!');
        }
    }

    private function _validateForWrite() {
        if ($this->field === null) {
            throw new TProtocolException('Required field Filter.field is unset!');
        }
    }

    public function jsonSerialize() {
        $this->_validateForWrite();
        $json = new stdClass;
        if ($this->field !== null) {
            $json->field = (string)$this->field;
        }
        if ($this->operator !== null) {
            $json->operator = (string)$this->operator;
        }
        if ($this->value !== null) {
            $json->value = (string)$this->value;
        }
        if ($this->values !== null) {
            $json->values = $this->values;
        }
        if ($this->sub_rules !== null) {
            $json->sub_rules = $this->sub_rules;
        }
        if ($this->combinator !== null) {
            $json->combinator = (string)$this->combinator;
        }
        return $json;
    }
}
